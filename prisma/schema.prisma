// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  resumes  Resume[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  personalInfo  PersonalInfo? // One-to-one relationship
  experiences   Experience[]
  educations    Education[]
  skills        Skill[]
  customizations Customization[]
}

model PersonalInfo {
  id            String    @id @default(cuid())
  resumeId      String    @unique
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  fullName      String
  email         String
  phone         String?
  address       String?
  linkedin      String?
  github        String?
  portfolio     String?
  profilePicture String?
  summary       String?
}

model Experience {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  title         String
  company       String
  location      String?
  startDate     DateTime
  endDate       DateTime?
  description   String?
}

model Education {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  institution   String
  degree        String
  fieldOfStudy  String?
  startDate     DateTime
  endDate       DateTime?
  description   String?
}

model Skill {
  id            String    @id @default(cuid())
  resumeId      String
  resume        Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name          String
  level         String? // e.g., Beginner, Intermediate, Advanced
}

model Customization {
  id            String   @id @default(cuid())
  resumeId      String
  resume        Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  templateName  String   // e.g., "ModernTemplate", "ElegantTemplate"
  styles        Json     // Stores the customization data as JSON

  @@unique([resumeId, templateName]) // Ensures only one customization per resume per template
}